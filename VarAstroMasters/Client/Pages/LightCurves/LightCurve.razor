@page "/LightCurves/{LightCurveId:int}"
@inject ILightCurveService LightCurveService

<h3>
    Detail krivky
    @if (_curve is {Star: not null})
    {
        <span>
            (hviezda
            <strong>
                <a href="@Endpoints.ClientStarSingleGet/@_curve.Star.Id">@_curve.Star.Name</a>
            </strong>)
        </span>
    }
</h3>
@if (_curve is null && _message is null)
{
    <Loader/>
}
else if (_curve is null && _message is not null)
{
    <Alert type="@_messageType">@_message</Alert>
}
else
{
    <section>
        <ResponsiveTable>
            <tbody>
            <tr>
                <th scope="row">Autor</th>
                <td>@_curve.User.Name</td>
            </tr>
            <tr>
                <th scope="row">RA</th>
                <td>@_starRa</td>
            </tr>
            <tr>
                <th scope="row">DEC</th>
                <td>@_starDec</td>
            </tr>
            <tr>
                <th scope="row">Hvezdáreň</th>
                <td>@(_curve.Observatory is null ? "Nešpecifikovaná" : _curve.Observatory.Address)</td>
            </tr>
            <tr>
                <th scope="row">Zariadenie</th>
                <td>@(_curve.Device is null ? "Nešpecifikované" : _curve.Device.Name)</td>
            </tr>
            <tr>
                <th scope="row">Pridané</th>
                <td>@_curve.DateCreated.ToString(Keywords.DefaultDateTimeFormat)</td>
            </tr>
            <tr>
                <th scope="row">Poznámky</th>
                <td>
                    @(_curve.Comment is null ||
                      _curve.Comment.Length == 0 ? "Nezadané" : _curve.Comment)
                </td>
            </tr>
            @if (_curve.DataFileLink is not null)
            {
                <tr>
                    <th scope="row">Odkaz na súbor</th>
                    <td>
                        <a href="@_curve.DataFileLink" target="_blank" rel="noopener noreferrer">Stiahnuť dátový súbor</a>
                    </td>
                </tr>
            }
            </tbody>
        </ResponsiveTable>
    </section>


    <section>
        <h4>Mapka</h4>
        @if (_curve is {Images: null})
        {
            <Alert type="@Keywords.AlertDanger">
                @Keywords.MapNotPublished
            </Alert>
        }
        else
        {
            @foreach (var image in _curve.Images)
            {
                <MudCard>
                    <MudCardContent Style="display: flex; justify-content: center">
                        <MudImage Src="@image.Data"/>
                    </MudCardContent>
                    @* <MudCardActions Style="justify-content: center"> *@
                    @*     <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveImage(image.Id)"> *@
                    @*         Remove Image *@
                    @*     </MudButton> *@
                    @* </MudCardActions> *@
                </MudCard>
            }
        }
    </section>

    <section>
        <h4>Priebeh krivky</h4>
        @if (_curve.Values is not null)
        {
            <ScatterChart Values="@_curve.Values"></ScatterChart>
        }
        else
        {
            <Loader/>
        }
    </section>
}

@code {

    [Parameter]
    public int LightCurveId { get; set; }

    private LightCurveDTO? _curve { get; set; }
    private string _starRa = "-";
    private string _starDec = "-";
    private string? _message { get; set; }
    private string? _messageType { get; set; }
    private Dictionary<string, string>? _meta = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await LightCurveService.LightCurveSingleGet(LightCurveId);
        if (response.Success)
        {
            _curve = response.Data;
            var sc = _curve.Star.StarCatalogs.Where(c => c.Primary).FirstOrDefault();
            if (sc is not null)
            {
                _starRa = $"{sc.Ra} ({sc.CatalogId})";
                _starDec = $"{sc.Dec} ({sc.CatalogId})";
            }
            GetValuesForCurve();
        }
        _message = response.Message;
        _messageType = MessageHelper.GetAlertType(response.Success);
    }

    private async Task GetValuesForCurve()
    {
        var response = await LightCurveService.LightCurveSingleValuesGet(LightCurveId);
        if (response.Success)
        {
            _curve.Values = response.Data;
        }
        StateHasChanged();
    }

}