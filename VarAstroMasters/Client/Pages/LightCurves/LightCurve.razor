@page "/LightCurves/{LightCurveId:int}"
@using Newtonsoft.Json
@inject ILightCurveService LightCurveService

@if (_curve is null)
{
    <h3>Prebieha načítanie..</h3>
}
else
{
    <h3>
        Detail krivky (hviezda
        <strong>
            <a href="@Endpoints.ClientStarSingleGet/@_curve.Star.Id">@_curve.Star.Name</a>
        </strong>)
    </h3>

    <section>
        <ResponsiveTable>
            <tbody>
            <tr>
                <th scope="row">Autor</th>
                <td>@_curve.User.Name</td>
            </tr>
            <tr>
                <th scope="row">RA</th>
                <td>@_starRa</td>
            </tr>
            <tr>
                <th scope="row">DEC</th>
                <td>@_starDec</td>
            </tr>
            <tr>
                <th scope="row">Hvezdáreň</th>
                <td>@(_curve.Observatory is null ? "Nešpecifikovaná" : _curve.Observatory.Address)</td>
            </tr>
            <tr>
                <th scope="row">Zariadenie</th>
                <td>@(_curve.Device is null ? "Nešpecifikované" : _curve.Device.Name)</td>
            </tr>
            <tr>
                <th scope="row">Pridané</th>
                <td>@_curve.DateCreated.ToString(@Keywords.DefaultDateTimeFormat)</td>
            </tr>
            <tr>
                <th scope="row">Poznámky</th>
                <td>@(_curve.Comment.Length == 0 ? "Nezadané" : @_curve.Comment)</td>
            </tr>
            </tbody>
        </ResponsiveTable>
    </section>


    <section>
        <h4>Priebeh krivky</h4>
        @if (_curve.Values is not null)
        {
            <ScatterChart Values="@_curve.Values"></ScatterChart>
        }
        else
        {
            <Loader/>
        }
    </section>
}

@code {

    [Parameter]
    public int LightCurveId { get; set; }

    private LightCurveDTO? _curve { get; set; }
    private string _starRa = "-";
    private string _starDec = "-";
    private Dictionary<string, string>? _meta = null;

    protected override async Task OnInitializedAsync()
    {
        _curve = await LightCurveService.LightCurveSingleGet(LightCurveId);
        var sc = _curve.Star.StarCatalogs.Where(c => c.Primary).FirstOrDefault();
        if (sc is not null)
        {
            _starRa = $"{sc.Ra} ({sc.CatalogId})";
            _starDec = $"{sc.Dec} ({sc.CatalogId})";
        }
        else
        {
            if (_curve.Meta is not null)
            {
                _starRa = $"{_curve.Meta.GetValueOrDefault("RA", "-")} (fotometria)";
                _starDec = $"{_curve.Meta.GetValueOrDefault("DEC", "-")} (fotometria)";
            }
        }
        GetValuesForCurve();
    }

    private async Task GetValuesForCurve()
    {
        var response = await LightCurveService.LightCurveSingleValuesGet(LightCurveId);
        if (response.Success)
        {
            _curve.Values = response.Data;
        }
        StateHasChanged();
    }

}