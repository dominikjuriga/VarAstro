@page "/LightCurves/{LightCurveId:int}"
@inject ILightCurveService LightCurveService

@if (Curve is null && _message is null)
{
    <Loader/>
}
else if (Curve is null && _message is not null)
{
    <Alert type="@_messageType">@_message</Alert>
}
else
{
    <MudCard Class="mb-3">
        <MudCardHeader>
            <MudText Typo="Typo.h3">
                Detail krivky (hviezda
                <strong>
                    <a href="@Endpoints.ClientStarSingleGet/@Curve.Star.Id">@Curve.Star.Name</a>
                </strong>)
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudSimpleTable>
                <tbody>
                <tr>
                    <th scope="row">Autor</th>
                    <td>@Curve.User.Name</td>
                </tr>
                <tr>
                    <th scope="row">RA</th>
                    <td>@(string.Format("{0:N5}", Curve.Star.RA))</td>
                </tr>
                <tr>
                    <th scope="row">DEC</th>
                    <td>@(string.Format("{0:N5}", Curve.Star.DEC))</td>
                </tr>
                <tr>
                    <th scope="row">Hvezdáreň</th>
                    <td>@(Curve.Observatory is null ? "Nešpecifikovaná" : Curve.Observatory.Address)</td>
                </tr>
                <tr>
                    <th scope="row">Zariadenie</th>
                    <td>@(Curve.Device is null ? "Nešpecifikované" : Curve.Device.Name)</td>
                </tr>
                <tr>
                    <th scope="row">Pridané</th>
                    <td>@Curve.DateCreated.ToString(Keywords.DefaultDateTimeFormat)</td>
                </tr>
                <tr>
                    <th scope="row">Poznámky</th>
                    <td>
                        @(Curve.Comment is null ||
                          Curve.Comment.Length == 0 ? "Nezadané" : Curve.Comment)
                    </td>
                </tr>
                @if (Curve.DataFileLink is not null)
                {
                    <tr>
                        <th scope="row">Odkaz na súbor</th>
                        <td>
                            <MudLink Href="@Curve.DataFileLink" target="_blank" rel="noopener noreferrer">Stiahnuť dátový súbor</MudLink>
                        </td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudCardContent>
    </MudCard>


    <MudCard Class="mb-3">
        <MudCardContent>
            <h4>Mapka</h4>
            @if (Curve is {Images: null})
            {
                <Alert type="@Keywords.AlertDanger">
                    @Keywords.MapNotPublished
                </Alert>
            }
            else
            {
                @foreach (var image in Curve.Images)
                {
                    <MudCard>
                        <MudCardContent Style="display: flex; justify-content: center">
                            <MudImage Src="@image.Data"/>
                        </MudCardContent>

                    </MudCard>
                }
            }
        </MudCardContent>
    </MudCard>


    @if (Curve is {Values: not null, Star: not null})
    {
        <SingleCurve Curve="Curve" CurveLayout="col-12" Display="@true"/>
    }
}

@code {

    [Parameter]
    public int LightCurveId { get; set; }

    private LightCurveDTO? Curve { get; set; }
    private string _starRa = "-";
    private string _starDec = "-";
    private string? _message { get; set; }
    private string? _messageType { get; set; }
    private Dictionary<string, string>? _meta = null;

    protected override async Task OnInitializedAsync()
    {
        var response = await LightCurveService.LightCurveSingleGet(LightCurveId);
        if (response.Success)
        {
            Curve = response.Data;
            var sc = Curve.Star.StarCatalogs.Where(c => c.Primary).FirstOrDefault();
            if (sc is not null)
            {
                _starRa = $"{sc.Ra} ({sc.CatalogId})";
                _starDec = $"{sc.Dec} ({sc.CatalogId})";
            }
            GetValuesForCurve();
        }
        _message = response.Message;
        _messageType = MessageHelper.GetAlertType(response.Success);
    }

    private async Task GetValuesForCurve()
    {
        var response = await LightCurveService.LightCurveSingleValuesGet(LightCurveId);
        if (response is {Success: true})
        {
            Curve.Values = response.Data;
        }

        Curve.ValuesFinishedLoading = true;
        StateHasChanged();
    }

}