@page "/LightCurves/Add/{StarId:int}"
@using System.Text.RegularExpressions
@using VarAstroMasters.Shared
@using VarAstroMasters.Shared.Helpers
@inject ILightCurveService LightCurveService
@inject IStarService StarService
@inject IUserService UserService

@attribute [Authorize(Roles = "User,Administrator")]
<PageTitle>Nové pozorovanie | @Keywords.DefaultPageTitle</PageTitle>
<h3>
    Nové pozorovanie
    @if (_star is not null)
    {
        <span>- hviezda <strong>@_star.Name</strong></span>
    }
</h3>

@if (_star is null || _devices is null)
{
    <Loader/>
}
else
{
@if (!succeeded)
{
    <section>
        <EditForm Model="_lightCurveAdd" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator/>
            <InputFile id="data_file" hidden OnChange="HandleDataFileOnChange" class="form-control"></InputFile>
            <InputFile id="images" OnChange="OnImageChange" hidden accept="@Keywords.AcceptedImageFormats" class="form-control"></InputFile>
            <MudCard Class="mb-3">
                <MudCardContent>
                    <div class="d-flex justify-content-between align-items-center">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="data_file">
                            Zvoliť dátový súbor
                        </MudButton>
                        <span>@filename</span>
                    </div>
                </MudCardContent>
            </MudCard>

            <MudCard Class="mb-3">
                <MudCardContent Class="text-center">
                    <MudFab HtmlTag="label"
                            Color="Color.Primary"
                            Icon="@Icons.Filled.Image"
                            Label="Mapka"
                            for="images"/>

                    <div class="my-3 d-flex justify-content-center flex-wrap">
                        @foreach (var image in _lightCurveAdd.Images)
                        {
                            <img src="@image.Data" alt="Mapka hviezdy"/>
                        }
                    </div>
                </MudCardContent>
            </MudCard>

            <MudSelect Class="mb-3" T="string" Variant="Variant.Filled" Label="Formát Juliánskeho dáta" @bind-Value="_lightCurveAdd.JD" For="@(() => _lightCurveAdd.JD)">
                <MudSelectItem T="string" Value="@(Keywords.LcJdFormatHeliocentric)">Heliocentrický</MudSelectItem>
                <MudSelectItem T="string" Value="@(Keywords.LcJdFormatGeocentric)">Geocentrický</MudSelectItem>
            </MudSelect>

            <MudSelect Class="mb-3" T="string" Variant="Variant.Filled" Label="Fotometrický systém" @bind-Value="_lightCurveAdd.PhotometricSystem" For="@(() => _lightCurveAdd.PhotometricSystem)">
                <MudSelectItem T="string" Value="@(Keywords.LcPhotometricInstrumental)">Inštrumentálny</MudSelectItem>
                <MudSelectItem T="string" Value="@(Keywords.LcPhotometricStandard)">Štandardný</MudSelectItem>
            </MudSelect>

            <MudTextField Class="mb-3" list="filter-types" @bind-Value="_lightCurveAdd.Filter" Label="Typ filtra" Variant="Variant.Filled" For="@(() => _lightCurveAdd.Filter)"/>
            <datalist id="filter-types">
                <option value="U"/>
                <option value="B"/>
                <option value="V"/>
                <option value="R"/>
                <option value="I"/>
                <option value="u"/>
                <option value="g"/>
                <option value="r"/>
                <option value="i"/>
                <option value="z"/>
            </datalist>

            <MudSelect Class="mb-3" T="PublishVariant" Variant="Variant.Filled" Label="Zverejniť pozorovanie" @bind-Value="_lightCurveAdd.PublishVariant">
                <MudSelectItem T="PublishVariant" Value="@PublishVariant.All">Zverejniť mapku, krivku a dátový súbor</MudSelectItem>
                <MudSelectItem T="PublishVariant" Value="@PublishVariant.None">Nezverejňovať</MudSelectItem>
                <MudSelectItem T="PublishVariant" Value="@PublishVariant.OnlyMap">Zverejniť mapku</MudSelectItem>
                <MudSelectItem T="PublishVariant" Value="@PublishVariant.OnlyMapAndCurve">Zverejniť mapku a krivku</MudSelectItem>
            </MudSelect>

            <div class="d-flex justify-content-between align-items-center gap-3">
                <MudSelect Class="mb-3" T="int" Variant="Variant.Filled" Label="Zariadenie" @bind-Value="_lightCurveAdd.DeviceId">
                    <MudSelectItem T="int" Value="0">Neuvedené</MudSelectItem>
                    @foreach (var device in _devices)
                    {
                        <MudSelectItem T="int" Value="@device.Id">@device.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudAvatar Rounded="true" @onclick="() => _lightCurveAdd.DeviceId = 0">
                    <MudIcon Icon="@Icons.Filled.Cancel"/>
                </MudAvatar>
            </div>
            <MudTextField Class="mb-3" T="string" Label="Poznámky" Variant="Variant.Filled" @bind-Value="_lightCurveAdd.Comment" Lines="3"/>

            @* <ValidationSummary></ValidationSummary> *@

            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Pridať pozorovanie</MudButton>

        </EditForm>
    </section>
}
else
{
    <Alert>
        Pozorovanie úspešne pridané. <a href="@Endpoints.ClientLightCurveSingleGet/@savedId">Zobraziť.</a>
    </Alert>
}
}

@code {

    [Parameter]
    public int StarId { get; set; }

    private LightCurveAdd _lightCurveAdd { get; set; } = new();
    private static int maxFileSizeKiB { get; set; } = 64;
    private static long maxFileSize { get; set; } = 1024 * 1000 * maxFileSizeKiB;
    private StarDTO? _star { get; set; }
    private MatchCollection? _matches { get; set; }
    private bool succeeded { get; set; }
    private List<DeviceDTO>? _devices { get; set; }
    private int? savedId { get; set; }
    private string? filename { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var response = await StarService.GetStarAsync(StarId);
        _star = response.Data;
        var deviceResponse = await UserService.UserMyDevicesGet();
        if (deviceResponse is {Success:true})
        {
            _devices = deviceResponse.Data;
        }
        _lightCurveAdd.StarId = _star.Id;
    }

    private async Task OnImageChange(InputFileChangeEventArgs e)
    {
        var maxImageCount = 1;
        foreach (var image in e.GetMultipleFiles(maxImageCount))
        {
            _lightCurveAdd.Images = new List<Image>();
            _lightCurveAdd.Images.Add(new Image
            {
                Data = await Base64Helper.ImageToB64(image)
            });
        }
    }

    private async Task HandleSubmit()
    {
        var result = await LightCurveService.LightCurvePost(_lightCurveAdd);
        if (result.Success)
        {
            succeeded = true;
            savedId = result.Data;
        }
    }

    private async Task HandleDataFileOnChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        var file = e.GetMultipleFiles(1)[0];
        try
        {
            filename = file.Name;
            var fileStream = new StreamContent(file.OpenReadStream(maxFileSize));
            var fileContent = await fileStream.ReadAsStringAsync();
            ParseDataFile(fileContent);
            _lightCurveAdd.DataFileContent = fileContent;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void ParseDataFile(string content)
    {
        var pattern = @"\b(Filter|VAR Name|JD): (\S+)\b";
        _matches = Regex.Matches(content, pattern, RegexOptions.IgnoreCase);

        foreach (Match match in _matches)
        {
    // Group 1 is the key, Group 2 is the value 
            switch (match.Groups[1].Value.ToLower())
            {
                case "filter":
                    _lightCurveAdd.Filter = match.Groups[2].Value;
                    break;
                case "jd":
                    _lightCurveAdd.JD = match.Groups[2].Value;
                    break;
                default:
                    break;
            }
        }
    }

}