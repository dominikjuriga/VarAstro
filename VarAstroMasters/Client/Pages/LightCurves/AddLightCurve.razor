@page "/LightCurves/Add/{StarId:int}"
@using System.Text.RegularExpressions
@using VarAstroMasters.Shared
@inject ILightCurveService LightCurveService
@inject IStarService StarService

@attribute [Authorize(Roles = "User,Administrator")]
<h3>Nové pozorovanie - hviezda <strong>@_star.Name</strong></h3>

<EditForm Model="_lightCurveAdd" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>

    <div class="my-3">
        <label for="data_file" class="form-label">
            <Tooltip Text="@dataFileMsg">Dátový súbor</Tooltip>
        </label>
        <InputFile id="data_file" OnChange="HandleDataFileOnChange" class="form-control"></InputFile>
    </div>

    <div class="my-3">
        <label for="image_file" class="form-label">
            <Tooltip Text="@maxFileSizeMsg">Mapka</Tooltip>
        </label>
        <InputFile id="image_file" OnChange="HandleImageFileOnChange" class="form-control"></InputFile>
    </div>

    <div class="my-3">
        <label for="jd" class="form-label">
            <Tooltip Text="Formát Juliánskeho dáta (geocentrický alebo heliocentrický)">Formát JD</Tooltip>
        </label>
        <InputSelect id="jd" class="form-select" @bind-Value="_lightCurveAdd.JD">
            <option value="null">Vyberte formát</option>
            <option value="@Keywords.LcJdFormatHeliocentric">Heliocentrický</option>
            <option value="@Keywords.LcJdFormatGeocentric">Geocentrický</option>
        </InputSelect>
        <ValidationMessage For="@(() => _lightCurveAdd.JD)"/>
    </div>

    <div class="my-3">
        <label for="photometric" class="form-label">
            Fotometrický systém
        </label>
        <InputSelect id="photometric" class="form-select" @bind-Value="_lightCurveAdd.PhotometricSystem">
            <option value="null">Vyberte systém</option>
            <option value="@Keywords.LcPhotometricInstrumental">Inštrumentálny</option>
            <option value="@Keywords.LcPhotometricStandard">Štandardný</option>
        </InputSelect>
        <ValidationMessage For="@(() => _lightCurveAdd.PhotometricSystem)"/>
    </div>

    <div class="my-3">
        <label for="filter" class="form-label">
            Typ filtra
        </label>
        <InputSelect id="filter" class="form-select" @bind-Value="_lightCurveAdd.Filter">
            <option value="null">Vyberte typ filtra</option>
            <option value="@Keywords.LcFilterNoFilter">Bez filtra</option>
            <option value="@Keywords.LcFilterU">U</option>
        </InputSelect>
        <ValidationMessage For="@(() => _lightCurveAdd.Filter)"/>
    </div>

    <div class="my-3">
        <label class="form-label" for="publish">
            Zverejniť pozorovanie
        </label>
        <InputSelect @bind-Value="_lightCurveAdd.PublishVariant" id="publish" class="form-select">
            <option value="@PublishVariant.All">Zverejniť mapku, krivku a dátový súbor</option>
            <option value="@PublishVariant.None">Nezverejňovať</option>
            <option value="@PublishVariant.OnlyMap">Zverejniť mapku</option>
            <option value="@PublishVariant.OnlyMapAndCurve">Zverejniť mapku a krivku</option>
        </InputSelect>
        <ValidationMessage For="@(() => _lightCurveAdd.PublishVariant)"/>
    </div>

    <div class="my-3">
        <label class="form-check-label" for="publish">
            Poznámky
        </label>
        <InputTextArea @bind-Value="_lightCurveAdd.Comment" class="form-control"></InputTextArea>
    </div>

    <button type="submit" class="btn btn-primary btn-lg">Pridať pozorovanie</button>

</EditForm>


@code {

    [Parameter]
    public int StarId { get; set; }

    private LightCurveAdd _lightCurveAdd { get; set; } = new();
    private static int maxFileSizeKiB = 64;
    private static long maxFileSize = 1024 * 1000 * maxFileSizeKiB;
    private static string dataFileMsg = $"Maximálna veľkosť súboru je {maxFileSizeKiB}KiB. Pokiaľ súbor obsahuje metadáta v správnom formáte, môže byť formulár doplnený automaticky.";
    private static string maxFileSizeMsg = $"Maximálna veľkosť súboru je {maxFileSizeKiB}KiB. Podporované formáty .jpg.";
    private StarDTO _star = new();
    private MatchCollection? _matches;


    protected override async Task OnInitializedAsync()
    {
        _star = await StarService.GetStarAsync(StarId);
        _lightCurveAdd.StarId = _star.Id;
    }

    private async Task HandleSubmit()
    {
        var result = await LightCurveService.AddLightCurve(_lightCurveAdd);
    }

    private async Task HandleImageFileOnChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("image");
    }

    private async Task HandleDataFileOnChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        var file = e.GetMultipleFiles(1)[0];
        try
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            ParseDataFile(await fileContent.ReadAsStringAsync());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void ParseDataFile(string content)
    {
        var pattern = @"\b(Filter|VAR Name|JD): (\S+)\b";
        _matches = Regex.Matches(content, pattern, RegexOptions.IgnoreCase);

        foreach (Match match in _matches)
        {
    // Group 1 is the key, Group 2 is the value 
            switch (match.Groups[1].Value.ToLower())
            {
                case "filter":
                    _lightCurveAdd.Filter = match.Groups[2].Value;
                    break;
                case "jd":
                    _lightCurveAdd.JD = match.Groups[2].Value;
                    break;
                default:
                    break;
            }
        }
    }

}