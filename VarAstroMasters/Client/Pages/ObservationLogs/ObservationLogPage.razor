@page "/ObservationLogs/{Id}"
@inject ILightCurveService LightCurveService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h3">Pozorovací denník @Log.User.Name</MudText>
        @if (Log is {Curves.Count: 0})
        {
            <p>Tento denník nemá žiadne pozorovania.</p>
        }
        else
        {
            <MudSelect Class="mb-3" T="int" MultiSelection="false" SelectedValuesChanged="(e) => HandleFilter(e.First())" Label="Filtrovať podľa názvu hviezdy">
                <MudSelectItem T="int" value="@Keywords.DefaultFilter">Všetky</MudSelectItem>
                @foreach (var star in Log.DistinctStars)
                {
                    <MudSelectItem T="int" value="@star.Id">@star.Name</MudSelectItem>
                }
            </MudSelect>
            <LightCurveListWithValues Curves="@FilteredCurves"/>
        }
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public string Id { get; set; }

    private ObservationLogDetailDTO? Log { get; set; }
    private List<LightCurveDTO>? LightCurves { get; set; }
    private List<LightCurveDTO>? FilteredCurves { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await LightCurveService.GetObservationLog(Id);
        if (response is {Success: true, Data: not null})
        {
            Log = response.Data;
            LightCurves = response.Data.Curves;
            HandleFilter(Keywords.DefaultFilter);

    // Not awaiting, so the page doesnt wait for the loading to finish
            GetValuesForCurves();
        }
    }


    private void HandleFilter(int starId)
    {
        if (LightCurves is null) return;
    // TODO filtrovanie asi uplne nefunguje TODO
        if (starId == Keywords.DefaultFilter)
        {
            FilteredCurves = LightCurves;
        }
        else
        {
            FilteredCurves = LightCurves.Where(lc => lc.StarId == starId).ToList();
            Console.WriteLine(FilteredCurves.First().StarId);
        }
        StateHasChanged();
    }

    private async Task GetValuesForCurves()
    {
        if (LightCurves is null) return;
        foreach (var curve in LightCurves)
        {
            if (!PublishHelper.CanShareCurve(curve.PublishVariant))
            {
                curve.ValuesFinishedLoading = true;
                continue;
            }
            var response = await LightCurveService.LightCurveSingleValuesGet(curve.Id);
            curve.ValuesFinishedLoading = true;
            if (response.Success)
            {
                curve.Values = response.Data;
                StateHasChanged();
            }
        }
    }


}