@page "/ObservationLogs/{Id}"
@inject ILightCurveService LightCurveService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h3">
            Pozorovací denník
            @if (Log is {User: not null})
            {
                <span>@Log.User.Name</span>
            }
        </MudText>
        @if (Log is {Curves.Count: 0})
        {
            <p>Tento denník nemá žiadne pozorovania.</p>
        }
        else
        {
            @if (Log is {DistinctStars: not null})
            {
                <MudSelect Class="mb-3" T="int" MultiSelection="false" @bind-Value="FilterId" Label="Filtrovať podľa názvu hviezdy">
                    <MudSelectItem T="int" value="@Keywords.DefaultFilter">Všetky</MudSelectItem>
                    @foreach (var star in Log.DistinctStars)
                    {
                        <MudSelectItem T="int" value="@star.Id">
                            @star.Name
                            @if (star is {StarCatalogs.Count: > 1})
                            {
                                <span> @star.StarCatalogs.First().CrossId, @star.StarCatalogs.First().CatalogId</span>
                            }
                        </MudSelectItem>
                    }
                </MudSelect>
            }
            @if (LightCurves is not null)
            {
                <LightCurveListWithValues Curves="@LightCurves" FilterId="FilterId"/>
            }
            else
            {
                <Loader/>
            }
        }
    </MudCardContent>
</MudCard>

@code {

    [Parameter]
    public string Id { get; set; }

    private ObservationLogDetailDTO? Log { get; set; }
    private List<LightCurveDTO>? LightCurves { get; set; }
    private int FilterId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await LightCurveService.GetObservationLog(Id);
        if (response is {Success: true, Data: not null})
        {
            Log = response.Data;
            LightCurves = response.Data.Curves;

    // Not awaiting, so the page doesnt wait for the loading to finish
            GetValuesForCurves();
        }
    }

    private async Task GetValuesForCurves()
    {
        if (LightCurves is null) return;
        foreach (var curve in LightCurves)
        {
            if (!PublishHelper.CanShareCurve(curve.PublishVariant))
            {
                curve.ValuesFinishedLoading = true;
                continue;
            }
            var response = await LightCurveService.LightCurveSingleValuesGet(curve.Id);
            curve.ValuesFinishedLoading = true;
            if (response.Success)
            {
                curve.Values = response.Data;
                StateHasChanged();
            }
        }
    }


}