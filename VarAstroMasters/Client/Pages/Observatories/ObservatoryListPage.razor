@page "/Observatory/List"
@inject IObservatoryService ObservatoryService
@attribute [Authorize]
@if (Observatories is null)
{
    <Loader/>
}
else
{
    if (Observatories is {Count: 0})
    {
        <MudAlert Severity="Severity.Info" Class="mb-5">
            Nemáte žiadne registrované hvezdárne
        </MudAlert>
    }
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h3">
                Vaše hvezdárne
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (Message is not null)
            {
                <MudAlert Severity="@MessageSeverity" Class="mb-5">
                    @Message
                </MudAlert>
            }

            @if (ObservatoryEdit is not null)
            {
                <MudCard Class="mb-5">
                    <MudCardContent>
                        <EditForm Model="ObservatoryEdit" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator/>
                            <MudTextField class="mb-5" @bind-Value="ObservatoryEdit.Address" Variant="Variant.Filled" For="() => ObservatoryEdit.Address" Label="Adresa hvezdárne"/>
                            <MudNumericField Step="0.0001" class="mb-5" @bind-Value="ObservatoryEdit.Longitude" Variant="Variant.Filled" For="() => ObservatoryEdit.Longitude" Label="Zemepisná dĺžka"/>
                            <MudNumericField Step="0.0001" class="mb-5" @bind-Value="ObservatoryEdit.Latitude" Variant="Variant.Filled" For="() => ObservatoryEdit.Latitude" Label="Zemepisná šírka"/>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Uložiť</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelEdit">Zrušiť</MudButton>
                        </EditForm>
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard Class="mb-5">
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Akcie</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NewItem">Pridať hvezdáreň</MudButton>
                    </MudCardContent>
                </MudCard>

                @if (Observatories is {Count: > 0})
                {
                    <MudSimpleTable>
                        <thead>
                        <tr>
                            <th>Adresa</th>
                            <th>Zemepisná dĺžka</th>
                            <th>Zemepisná šírka</th>
                            <th>Akcie</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var observatory in Observatories)
                        {
                            <tr>
                                <td>@observatory.Address</td>
                                <td>@observatory.Longitude</td>
                                <td>@observatory.Latitude</td>
                                <td>
                                    <MudButton OnClick="() => DeleteObservatory(observatory.Id)" Variant="Variant.Filled" Color="Color.Primary">Zmazať</MudButton>
                                    <MudButton OnClick="() => OpenEditObservatory(observatory)" Variant="Variant.Filled" Color="Color.Primary">Upraviť</MudButton>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </MudSimpleTable>
                }
            }

        </MudCardContent>
    </MudCard>
}

@code {
    private List<Observatory>? Observatories { get; set; }
    private Observatory? ObservatoryEdit { get; set; }
    private string? Message { get; set; }
    private Severity MessageSeverity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await ObservatoryService.ObservatoryListFromTokenGet();
        if (response is {Success: true})
        {
            Observatories = response.Data;
        }
    }

    private void CancelEdit()
    {
        Message = null;
        ObservatoryEdit = null;
    }

    private async Task DeleteObservatory(int observatoryId)
    {
        var response = await ObservatoryService.ObservatoryDelete(observatoryId);
        if (response is {Success: true} && Observatories is not null)
        {
            Observatories = Observatories.Where(d => d.Id != observatoryId).ToList();
        }
        Message = response?.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
    }

    private void OpenEditObservatory(Observatory observatory)
    {
        ObservatoryEdit = observatory;
        ObservatoryEdit.New = false;
    }

    private void NewItem()
    {
        ObservatoryEdit = new Observatory();
    }

    private async Task HandleSubmit()
    {
        if (ObservatoryEdit is null) return;
        ServiceResponse<Observatory>? response;
        if (ObservatoryEdit.New)
        {
            response = await ObservatoryService.ObservatoryPost(ObservatoryEdit);
        }
        else
        {
            response = await ObservatoryService.ObservatoryPut(ObservatoryEdit);
        }

        if (response is {Success: true, Data: not null} && Observatories is not null)
        {
            var observatory = Observatories.FirstOrDefault(d => d.Id == response.Data.Id);
            if (observatory is not null) Observatories.Remove(observatory);
            Observatories.Add(response.Data);
            CancelEdit();
        }
        Message = response.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
    }

}