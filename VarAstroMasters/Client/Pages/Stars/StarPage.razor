@page "/Stars/{StarId:int}"

@inject IStarService StarService
@inject ILightCurveService LightCurveService
@inject NavigationManager NavigationManager

<PageTitle>@(Star is null ? "" : Star.Name) | @Keywords.DefaultPageTitle</PageTitle>

@if (Star is null)
{
    <Loader/>
}
else
{
    <MudCard Class="mb-5">
        <MudCardHeader>
            <MudText Typo="Typo.h3">
                Hviezda
                @if (Star is {Name: not null})
                {
                    <span>@Star.Name</span>
                    @if (Star is {Identification.Count: 1})
                    {
                        <MudText Typo="Typo.h5">(@Star.Identification.First().UserIdentification)</MudText>
                    }
                }
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudCard Class="mb-5">
                <MudCardContent>
                    <MudText Typo="Typo.h4">Akcie</MudText>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToNew">Pridať pozorovanie</MudButton>
                </MudCardContent>
            </MudCard>
            <AuthorizeView Roles="Administrator">
                <MudCard Class="mb-5">
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Administrácia hviezdy</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToEditStar">Upraviť hviezdu</MudButton>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToPublications">Spravovať publikáciu</MudButton>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToCatalogs">Spravovať hviezdu v katalógoch</MudButton>
                    </MudCardContent>
                </MudCard>
            </AuthorizeView>

            <MudCard Class="mb-5">
                <MudCardContent>
                    <MudText Typo="Typo.h5">Údaje o hviezde</MudText>
                    <StarMetaListTable Data="Star"></StarMetaListTable>
                </MudCardContent>
            </MudCard>

            <MudCard Class="mb-5">
                <MudCardContent>
                    <MudText Typo="Typo.h5">Prítomnosť hviezdy v katalógoch</MudText>
                    <StarCatalogTable Data="Star.StarCatalogs"></StarCatalogTable>
                </MudCardContent>
            </MudCard>

            <MudCard Class="mb-5">
                <MudCardContent>
                    <h4> Pozorovanie tejto hviezdy</h4>
                    @if (Star is {LightCurves.Count: 0})
                    {
                        <h5>
                            Táto hviezda nemá žiadne pozorovania.
                        </h5>
                    }
                    else if (Star is {LightCurves.Count: > 0})
                    {
                        <LightCurveListWithValues Curves="@Star.LightCurves" CurveLayout="col-12"/>
                    }
                </MudCardContent>
            </MudCard>
        </MudCardContent>
    </MudCard>
}

@code {

    [Parameter]
    public int StarId { get; set; }

    private StarDTO? Star { get; set; }
    private StarCatalog? PrimaryStarCatalog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await StarService.GetStarAsync(StarId);
        if (response is {Success: true, Data: not null})
        {
            Star = response.Data;
            PrimaryStarCatalog = Star.StarCatalogs?.FirstOrDefault(sc => sc.Primary);

    // not awaiting so the curves load in the bg without waiting for finish
            GetCurveValues();
        }
    }

    private async Task GetCurveValues()
    {
        foreach (var curve in Star.LightCurves)
        {
            if (!PublishHelper.CanShareCurve(curve.PublishVariant))
            {
                curve.ValuesFinishedLoading = true;
                continue;
            }
            var response = await LightCurveService.LightCurveSingleValuesGet(curve.Id);
            curve.ValuesFinishedLoading = true;
            if (response.Success)
            {
                curve.Values = response.Data;
                StateHasChanged();
            }
        }
    }

    private void NavigateToNew()
    {
        if (Star is null) return;
        NavigationManager.NavigateTo($"{Endpoints.ClientLightCurvePost}/{Star.Id}");
    }

    private void NavigateToPublications()
    {
        if (Star is null) return;
        NavigationManager.NavigateTo($"{Endpoints.ClientAdminStars}/{Star.Id}/Publication");
    }

    private void NavigateToEditStar()
    {
        if (Star is null) return;
        NavigationManager.NavigateTo($"{Endpoints.ClientAdminStars}/{Star.Id}");
    }

    private void NavigateToCatalogs()
    {
        if (Star is null) return;
        NavigationManager.NavigateTo($"{Endpoints.ClientAdminStars}/{Star.Id}/Catalogs");
    }

}