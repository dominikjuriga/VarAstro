@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AppAuthStateProvider AuthStateProvider 

<PageTitle>Prihlásenie | @Keywords.DefaultPageTitle</PageTitle>

<h3>Prihlásenie</h3>

@if (!succeeded)
{
    <EditForm Model="_userLogin" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>

        <div class="form-group my-3">
            <label for="email">Email</label>
            <InputText @bind-Value="_userLogin.EmailAddress" id="email" class="form-control"/>
            <ValidationMessage For="@(() => _userLogin.EmailAddress)"/>
        </div>

        <div class="form-group my-3">
            <label for="password">Heslo</label>
            <InputText @bind-Value="_userLogin.Password" id="password" type="password" class="form-control"/>
            <ValidationMessage For="@(() => _userLogin.Password)"/>
        </div>

        <ValidationSummary/>

        <button type="submit" class="btn btn-primary btn-lg">Prihlásiť sa</button>
    </EditForm>
}
else
{
    <Alert>
        Prihlásenie prebehlo úspešne.
    </Alert>
}

@code {
    private UserLogin _userLogin { get; set; } = new();
    private bool succeeded { get; set; } = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    // if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
    // {
    //     _returnUrl = url;
    // }
    }

    private async Task HandleLogin()
    {
        var response = await AuthService.LogIn(_userLogin);
        if (response is {Success: true })
        {
    // _message = string.Empty;
            await LocalStorageService.SetItemAsync(Keywords.JWT_Bearer_Token, response.Data);
            await AuthStateProvider.LogIn();
            HttpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue(Keywords.Client_HTTP_Bearer_Header,
                    response.Data);
            succeeded = true;
        }
        else
        {
    // _message = response.Message;
        }
    }

}