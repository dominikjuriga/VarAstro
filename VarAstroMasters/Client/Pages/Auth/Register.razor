@page "/register"
@using VarAstroMasters.Shared.Models
@inject HttpClient HttpClient
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="_userRegister" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="_userRegister.EmailAddress" class="form-control"/>
        <ValidationMessage For="@(() => _userRegister.EmailAddress)"/>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="_userRegister.Password" class="form-control" type="password"/>
        <ValidationMessage For="@(() => _userRegister.Password)"/>
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="_userRegister.ConfirmPassword" class="form-control" type="password"/>
        <ValidationMessage For="@(() => _userRegister.ConfirmPassword)"/>
    </div>
    <ValidationSummary/>

    <button type="submit" class="btn btn-primary">Register</button>
    <div class="@_messageCssClass">
        <span>@_message</span>
    </div>
    <ul>
        <li>@Endpoints.ApiAuthLogin</li>
        <li>@Endpoints.ApiAuthRegister</li>
    </ul>
</EditForm>

@code {
    private UserRegister _userRegister = new();
    private string _message = String.Empty;
    private string _messageCssClass = String.Empty;

    private async Task HandleRegister()
    {
        var response = await AuthService.Register(_userRegister);
        if (response == null)
        {
            _message = "There was an issue with the server.";
        }
        else
        {
            _message = response.Message;
            _messageCssClass = response.Success ? "text-success" : "text-danger";
        }
    }
}