@page "/Device/List"
@inject IDeviceService DeviceService

@if (_devices is null)
{
    <h3>Prebieha načítavanie..</h3>
}
else
{
    @if (_deviceEdit is not null)
    {
        <h3>Úprava zariadenia</h3>

        <EditForm Model="_deviceEdit" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator/>

            <div class="my-3">
                <label for="name" class="form-label">
                    Názov zariadenia
                </label>
                <InputText id="name" @bind-Value="_deviceEdit.Name" class="form-control"></InputText>
            </div>
            <ValidationSummary></ValidationSummary>

            <button type="submit" class="btn btn-primary">Uložiť</button>
        </EditForm>
    }
    else
    {
        <h3>Vaše zariadenia</h3>

        @if (_devices.Count == 0)
        {
            <span>Nemáte žiadne registrované zariadenia.</span>
            <a href="@Endpoints.ClientDeviceAdd">Pridať zariadenie</a>
        }
        else
        {
            <ul>
                @foreach (var device in _devices)
                {
                    <li>
                        <span class="oi oi-camera-slr"></span>
                        @device.Name
                        <button class="btn btn-outline-info" @onclick="() => DeleteDevice(device.Id)">Zmazať</button>
                        <button class="btn btn-outline-success" @onclick="() => OpenEditDevice(device)">Upraviť</button>
                    </li>
                }
            </ul>
        }
    }
}

@code {
    private List<DeviceDTO>? _devices { get; set; } = null;
    private Device? _deviceEdit { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        _devices = await DeviceService.GetMyDevices();
    }

    private async Task DeleteDevice(int deviceId)
    {
        var result = await DeviceService.DeleteDevice(deviceId);
        if (result && _devices is not null)
        {
            _devices = _devices.Where(d => d.Id != deviceId).ToList();
        }
    }

    private void OpenEditDevice(DeviceDTO device)
    {
        _deviceEdit = new Device
        {
            Id = device.Id,
            Name = device.Name,
            UserId = device.UserId
        };
    }

    private async Task HandleSubmit()
    {
        var result = await DeviceService.EditDevice(_deviceEdit);
        if (result is not null && _devices is not null)
        {
            var dev = _devices.Where(d => d.Id == result.Id).First();
            _devices.Remove(dev);
            _devices.Add(result);
        }
    }

}