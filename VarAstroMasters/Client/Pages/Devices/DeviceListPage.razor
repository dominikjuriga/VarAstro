@page "/Device/List"
@using VarAstroMasters.Shared.Helpers
@inject IDeviceService DeviceService

@if (Devices is null)
{
    <Loader/>
}
else
{
    @if (DeviceEdit is not null)
    {
        <div class="d-flex justify-content-between">
            <h3>Úprava zariadenia</h3>
            <div>
                <a class="btn btn-primary" href="@Endpoints.ClientDeviceListGet">Zoznam zariadení</a>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between">

            <h3>Vaše zariadenia</h3>
            <div>
                <button class="btn btn-primary" @onclick="NewItem">Pridať zariadenie</button>
            </div>
        </div>
    }

    @if (Message is not null)
    {
        <Alert type="@MessageType">
            @Message
        </Alert>
    }
    <section>
        @if (DeviceEdit is not null)
        {
            <EditForm Model="DeviceEdit" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator/>
                <div class="my-3">
                    <label for="name" class="form-label">
                        Názov zariadenia
                    </label>
                    <InputText id="name" @bind-Value="DeviceEdit.Name" class="form-control"></InputText>
                </div>
                <ValidationSummary></ValidationSummary>

                <button type="submit" class="btn btn-primary">Uložiť</button>
                <button type="button" @onclick="CancelEdit" class="btn btn-secondary">Zrušiť</button>
            </EditForm>
        }
        else
        {
            @if (Devices.Count == 0)
            {
                <Alert type="@Keywords.AlertInfo">
                    <span>Nemáte žiadne registrované zariadenia.</span>
                </Alert>
            }
            else
            {
                <ResponsiveTable>
                    <thead>
                    <tr>
                        <th>Názov</th>
                        <th>Akcie</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var device in Devices)
                    {
                        <tr>
                            <td>@device.Name</td>
                            <td>
                                <button class="btn btn-outline-info" @onclick="() => DeleteDevice(device.Id)">Zmazať</button>
                                <button class="btn btn-outline-success" @onclick="() => OpenEditDevice(device)">Upraviť</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </ResponsiveTable>
            }
        }
    </section>
}

@code {
    private List<Device>? Devices { get; set; }
    private Device? DeviceEdit { get; set; }
    private string? Message { get; set; }
    private string? MessageType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await DeviceService.DevicesFromTokenGet();
        if (response is {Success: true})
        {
            Devices = response.Data;
        }
    }

    private void CancelEdit()
    {
        Message = null;
        DeviceEdit = null;
    }

    private async Task DeleteDevice(int deviceId)
    {
        var response = await DeviceService.DeviceDelete(deviceId);
        if (response is {Success: true} && Devices is not null)
        {
            Devices = Devices.Where(d => d.Id != deviceId).ToList();
        }
        Message = response?.Message;
        MessageType = MessageHelper.GetAlertType(response?.Success);
    }

    private void OpenEditDevice(Device device)
    {
        DeviceEdit = device;
        DeviceEdit.New = false;
    }

    private void NewItem()
    {
        DeviceEdit = new Device();
    }

    private async Task HandleSubmit()
    {
        if (DeviceEdit is null) return;
        ServiceResponse<Device>? response;
        if (DeviceEdit.New)
        {
            response = await DeviceService.DevicePost(DeviceEdit);
        }
        else
        {
            response = await DeviceService.DevicePut(DeviceEdit);
        }

        if (response is {Success: true, Data: not null} && Devices is not null)
        {
            var dev = Devices.FirstOrDefault(d => d.Id == response.Data.Id);
            if (dev is not null) Devices.Remove(dev);
            Devices.Add(response.Data);
            CancelEdit();
        }
        Message = response?.Message;
        MessageType = MessageHelper.GetAlertType(response?.Success);
    }

}