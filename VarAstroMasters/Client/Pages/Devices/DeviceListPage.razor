@page "/Device/List"
@inject IDeviceService DeviceService

@attribute [Authorize]

@if (Devices is null)
{
    <Loader/>
}
else
{
    if (Devices is {Count: 0})
    {
        <MudAlert Severity="Severity.Info" Class="mb-5">
            Nemáte žiadne registrované zariadenia
        </MudAlert>
    }
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h3">
                Vaše zariadenia
            </MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (Message is not null)
            {
                <MudAlert Severity="@MessageSeverity">
                    @Message
                </MudAlert>
            }

            @if (DeviceEdit is not null)
            {
                <MudCard Class="mb-5">
                    <MudCardContent>

                        <EditForm Model="DeviceEdit" OnValidSubmit="HandleSubmit">
                            <DataAnnotationsValidator/>
                            <MudTextField class="mb-5" @bind-Value="DeviceEdit.Name" Variant="Variant.Filled" For="() => DeviceEdit.Name" Label="Názov zariadenia"/>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Uložiť</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelEdit">Zrušiť</MudButton>
                        </EditForm>

                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudCard Class="mb-5">
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Akcie</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NewItem">Pridať zariadenie</MudButton>
                    </MudCardContent>
                </MudCard>

                @if (Devices is {Count: > 0})
                {
                    <MudSimpleTable>
                        <thead>
                        <tr>
                            <th>Názov</th>
                            <th>Akcie</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var device in Devices)
                        {
                            <tr>
                                <td>@device.Name</td>
                                <td>
                                    <MudButton OnClick="() => DeleteDevice(device.Id)" Variant="Variant.Filled" Color="Color.Primary">Zmazať</MudButton>
                                    <MudButton OnClick="() => OpenEditDevice(device)" Variant="Variant.Filled" Color="Color.Primary">Upraviť</MudButton>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </MudSimpleTable>
                }
            }

        </MudCardContent>
    </MudCard>
}

@code {
    private List<Device>? Devices { get; set; }
    private Device? DeviceEdit { get; set; }
    private string? Message { get; set; }
    private Severity MessageSeverity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await DeviceService.DevicesFromTokenGet();
        if (response is {Success: true})
        {
            Devices = response.Data;
        }
    }

    private void CancelEdit()
    {
        Message = null;
        DeviceEdit = null;
    }

    private async Task DeleteDevice(int deviceId)
    {
        var response = await DeviceService.DeviceDelete(deviceId);
        if (response is {Success: true} && Devices is not null)
        {
            Devices = Devices.Where(d => d.Id != deviceId).ToList();
        }
        Message = response?.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
    }

    private void OpenEditDevice(Device device)
    {
        DeviceEdit = device;
        DeviceEdit.New = false;
    }

    private void NewItem()
    {
        DeviceEdit = new Device();
    }

    private async Task HandleSubmit()
    {
        if (DeviceEdit is null) return;
        ServiceResponse<Device>? response;
        if (DeviceEdit.New)
        {
            response = await DeviceService.DevicePost(DeviceEdit);
        }
        else
        {
            response = await DeviceService.DevicePut(DeviceEdit);
        }

        if (response is {Success: true, Data: not null} && Devices is not null)
        {
            var dev = Devices.FirstOrDefault(d => d.Id == response.Data.Id);
            if (dev is not null) Devices.Remove(dev);
            Devices.Add(response.Data);
            CancelEdit();
        }
        Message = response?.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
    }

}