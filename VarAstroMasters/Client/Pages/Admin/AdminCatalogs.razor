@page "/Admin/Catalogs"
@inject IStarService StarService

@if (Catalogs is null)
{
    <Loader/>
}
else
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h3">Katalógy</MudText>
        </MudCardHeader>
        <MudCardContent>

            @if (EditCatalog is null)
            {
                <MudCard Class="mb-5">
                    <MudCardHeader>
                        <MudText Typo="Typo.h4">Akcie</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NewCatalog">Nový katalóg</MudButton>
                    </MudCardContent>
                </MudCard>
            }

            @if (Message is not null)
            {
                <MudAlert Severity="@MessageSeverity">
                    @Message
                </MudAlert>
            }
            @if (EditCatalog is not null)
            {
                <EditForm Model="EditCatalog" class="mb-5">
                    <MudTextField class="mb-5" @bind-Value="EditCatalog.Name" For="() => EditCatalog.Name" Variant="Variant.Filled" Label="Názov katalógu"/>

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveEdit">Uložiť</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelEdit">Zrušiť</MudButton>
                </EditForm>
            }
            else
            {
                @if (CatalogToDelete is not null)
                {
                    <MudAlert Severity="Severity.Warning" Class="mb-5">
                        Naozaj chcete odstrániť katalóg @CatalogToDelete? Táto akcia je nevratná a zmaže všetky pridružené záznamy (identifikácia hviezd v katalógu)! <br/>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteCatalog">Áno, chcem zmazať katalóg</MudButton><br/>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CancelDelete">Nie, zrušiť akciu</MudButton>
                    </MudAlert>
                }
                if (Catalogs.Count > 0)
                {
                    <MudSimpleTable>
                        <thead>
                        <tr>
                            <th>Katalóg</th>
                            <th>Akcie</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var catalog in Catalogs)
                        {
                            <tr>
                                <td>@catalog.Name</td>
                                <td>
                                    <MudTooltip Text="Akcia vyžaduje dodatočné potvrdenie">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ConfirmDeleteCatalog(catalog.Name)">Zmazať</MudButton>
                                    </MudTooltip>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </MudSimpleTable>
                }
                else
                {
                    <p>Systém neobsahuje žiadne katalógy.</p>
                }
            }

        </MudCardContent>
    </MudCard>
}

@code {
    private List<Catalog>? Catalogs { get; set; }
    private CatalogEdit? EditCatalog { get; set; }
    private string? Message { get; set; }
    private Severity MessageSeverity { get; set; }
    private string? CatalogToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await StarService.CatalogListGet();
        if (response.Success)
        {
            Catalogs = response.Data;
        }
    }

    private void NewCatalog()
    {
        EditCatalog = new CatalogEdit();
    }

    private async Task SaveEdit()
    {
        var response = await StarService.CatalogPost(EditCatalog);
        Message = response.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
        if (response is {Success: true, Data: not null} && Catalogs is not null)
        {
            if (EditCatalog.New) Catalogs.Add(new Catalog { Name = response.Data.Name });
            else
            {
                var cat = Catalogs.Where(c => c.Name == EditCatalog.OriginalName).FirstOrDefault();
                if (cat is not null)
                {
                    Catalogs.Remove(cat);
                    Catalogs.Add(response.Data);
                }
            }
        }
    }

    private void ConfirmDeleteCatalog(string catalogName)
    {
        CatalogToDelete = catalogName;
    }

    private void CancelDelete()
    {
        CatalogToDelete = null;
    }

    private async Task DeleteCatalog()
    {
        if (CatalogToDelete is null) return;

        var response = await StarService.CatalogDelete(CatalogToDelete);
        if (response is {Success:true})
        {
            Catalogs = Catalogs.Where(c => c.Name != CatalogToDelete).ToList();
            CatalogToDelete = null;
        }
        Message = response.Message;
        MessageSeverity = response.Success ? Severity.Success : Severity.Error;
    }

    private void CancelEdit()
    {
        EditCatalog = null;
    }

}