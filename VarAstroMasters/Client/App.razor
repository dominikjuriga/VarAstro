@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h3">K tejto stránke nemáte prístup!</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">Ak ste prihlásený, nemáte potrebné oprávenenia.</MudText>
                            <MudText>Prosím, <MudLink Href="/login">prihláste sa</MudLink> alebo si <MudLink Href="/register">vytvorte účet</MudLink>. </MudText>
                        </MudCardContent>
                    </MudCard>

                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
        </Found>
        <NotFound>
            <PageTitle>Stránka nenájdená | @Keywords.DefaultPageTitle</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Na tejto adrese nič neexistuje.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code
{
    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            var savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthStateProvider)AuthenticationStateProvider).LogIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }
    }
}