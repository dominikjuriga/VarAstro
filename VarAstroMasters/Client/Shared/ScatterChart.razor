@using ChartJs.Blazor.ScatterChart
@using System.Text.Json
@using System.Collections
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.PolarAreaChart
@using Microsoft.Extensions.Options

@if (Message is null)
{
    <Chart Config="_config"></Chart>
}
else
{
    <Alert type="danger">
        @Message
    </Alert>
}

@code {

    [Parameter]
    public string Values { get; set; } = string.Empty;

    private string? Message { get; set; }

    private ScatterConfig _config;

    protected override void OnInitialized()
    {
        _config = new ScatterConfig
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Svetelná krivka"
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks()
                            {
                                Reverse = true
                            }
                        }
                    }
                }
            }
        };
        var dataset = new LineDataset<Point>
        {
            Label = $"Mag"
        };
        var valDictionary = JsonSerializer.Deserialize<Dictionary<string, List<decimal>>>(Values);
        if (valDictionary != null)
        {
            for (var i = 0; i < valDictionary["HJD"].Count; i++)
            {
                dataset.Add(new Point((double)valDictionary["HJD"][i], (double)valDictionary["V-C"][i]));
            }
            _config.Data.Datasets.Add(dataset);
        }
        else
        {
            Message = "Nebolo možné získať údaje krivky.";
        }
    }

}